// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using HomeTherapistApi.Models;

#nullable disable

namespace HomeTherapistApi.Migrations
{
  [DbContext(typeof(HometherapistContext))]
  [Migration("20230523011213_CreateIdentitySchema")]
  partial class CreateIdentitySchema
  {
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "7.0.5")
          .HasAnnotation("Relational:MaxIdentifierLength", 64);

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext");

            b.Property<ulong>("RoleId")
                      .HasColumnType("bigint unsigned");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext");

            b.Property<ulong>("UserId")
                      .HasColumnType("bigint unsigned");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255)");

            b.Property<string>("ProviderKey")
                      .HasColumnType("varchar(255)");

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("longtext");

            b.Property<ulong>("UserId")
                      .HasColumnType("bigint unsigned");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
          {
            b.Property<ulong>("UserId")
                      .HasColumnType("bigint unsigned");

            b.Property<ulong>("RoleId")
                      .HasColumnType("bigint unsigned");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
          {
            b.Property<ulong>("UserId")
                      .HasColumnType("bigint unsigned");

            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255)");

            b.Property<string>("Name")
                      .HasColumnType("varchar(255)");

            b.Property<string>("Value")
                      .HasColumnType("longtext");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens", (string)null);
          });

      modelBuilder.Entity("PellokITHomeApi.Models.Role", b =>
          {
            b.Property<ulong>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint unsigned");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext");

            b.Property<string>("Name")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256)");

            b.Property<string>("NormalizedName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256)");

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasDatabaseName("RoleNameIndex");

            b.ToTable("AspNetRoles", (string)null);
          });

      modelBuilder.Entity("PellokITHomeApi.Models.Users", b =>
          {
            b.Property<ulong>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint unsigned")
                      .HasColumnName("id");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("int")
                      .HasColumnName("access_failed_count");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext")
                      .HasColumnName("concurrency_stamp");

            b.Property<DateTimeOffset?>("CreatedAt")
                      .HasColumnType("datetime(6)")
                      .HasColumnName("created_at");

            b.Property<string>("Email")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256)")
                      .HasColumnName("email");

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("tinyint(1)")
                      .HasColumnName("email_confirmed");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("tinyint(1)")
                      .HasColumnName("lockout_enabled");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("datetime(6)")
                      .HasColumnName("lockout_end");

            b.Property<string>("NormalizedEmail")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256)")
                      .HasColumnName("normalized_email");

            b.Property<string>("NormalizedUserName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256)")
                      .HasColumnName("normalized_username");

            b.Property<string>("PasswordHash")
                      .HasColumnType("longtext")
                      .HasColumnName("password_hash");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("longtext")
                      .HasColumnName("phone_number");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("tinyint(1)")
                      .HasColumnName("phone_number_confirmed");

            b.Property<string>("RememberToken")
                      .HasColumnType("longtext")
                      .HasColumnName("remember_token");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("longtext")
                      .HasColumnName("security_stamp");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("tinyint(1)")
                      .HasColumnName("two_factor_enabled");

            b.Property<DateTimeOffset?>("UpdatedAt")
                      .HasColumnType("datetime(6)")
                      .HasColumnName("updated_at");

            b.Property<string>("UserName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256)")
                      .HasColumnName("username");

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasDatabaseName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasDatabaseName("UserNameIndex");

            b.ToTable("Users", (string)null);
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
          {
            b.HasOne("PellokITHomeApi.Models.Role", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
          {
            b.HasOne("PellokITHomeApi.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
          {
            b.HasOne("PellokITHomeApi.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
          {
            b.HasOne("PellokITHomeApi.Models.Role", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("PellokITHomeApi.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
          {
            b.HasOne("PellokITHomeApi.Models.User", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });
#pragma warning restore 612, 618
    }
  }
}
